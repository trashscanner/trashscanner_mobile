name: Flutter CI

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - '**'

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: false

env:
  FLUTTER_CHANNEL: stable

jobs:
  tests:
    name: Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: ${{ env.FLUTTER_CHANNEL }}
          cache: true

      - name: Install dependencies
        run: flutter pub get

      - name: Run tests with coverage
        run: flutter test --coverage --coverage-path=coverage/lcov.info

      - name: Install lcov
        run: |
          sudo apt-get update
          sudo apt-get install -y lcov

      - name: Filter coverage report
        run: |
          lcov --remove coverage/lcov.info \
            'lib/**.g.dart' \
            'lib/**.freezed.dart' \
            'lib/**.mocks.dart' \
            'lib/generated/**' \
            'test/**' \
            '**/*.md' \
            '**/build/**' \
            --ignore-errors unused \
            -o coverage/lcov.info

      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/lcov.info

  quality:
    name: Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: ${{ env.FLUTTER_CHANNEL }}
          cache: true

      - name: Install dependencies
        run: flutter pub get

      - name: Run analyzer
        run: flutter analyze

  build:
    name: Build ${{ matrix.target }}
    needs:
      - tests
      - quality
    if: github.event_name == 'pull_request'
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: Android APK
            build_command: flutter build apk --release
            artifact_path: build/app/outputs/flutter-apk/app-release.apk
          - os: ubuntu-latest
            target: Linux desktop
            build_command: flutter build linux --release
            artifact_path: build/linux/x64/release/bundle
          - os: ubuntu-latest
            target: Web
            build_command: flutter build web --release
            artifact_path: build/web
          - os: macos-latest
            target: iOS
            build_command: flutter build ios --no-codesign
            artifact_path: build/ios/iphoneos
          - os: macos-latest
            target: macOS
            build_command: flutter build macos --release
            artifact_path: build/macos/Build/Products/Release
          - os: windows-latest
            target: Windows desktop
            build_command: flutter build windows --release
            artifact_path: build/windows/x64/runner/Release
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: ${{ env.FLUTTER_CHANNEL }}
          cache: true

      - name: Install Linux desktop dependencies
        if: runner.os == 'Linux' && matrix.target == 'Linux desktop'
        run: |
          sudo apt-get update
          sudo apt-get install -y clang cmake ninja-build pkg-config libgtk-3-dev liblzma-dev
          flutter config --enable-linux-desktop

      - name: Enable web support
        if: runner.os == 'Linux' && matrix.target == 'Web'
        run: flutter config --enable-web

      - name: Enable iOS support
        if: runner.os == 'macOS' && matrix.target == 'iOS'
        run: flutter config --enable-ios

      - name: Enable macOS desktop support
        if: runner.os == 'macOS' && matrix.target == 'macOS'
        run: flutter config --enable-macos-desktop

      - name: Enable Windows desktop support
        if: runner.os == 'Windows'
        shell: pwsh
        run: flutter config --enable-windows-desktop

      - name: Install dependencies
        run: flutter pub get

      - name: Build artifact
        run: ${{ matrix.build_command }}

      - name: Upload build artifact
        if: ${{ matrix.artifact_path != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.target }}
          path: ${{ matrix.artifact_path }}

  preview:
    name: Preview (Web)
    needs: build
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    environment:
      name: preview
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v5

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: ${{ env.FLUTTER_CHANNEL }}
          cache: true

      - name: Enable web
        run: flutter config --enable-web

      - name: Install dependencies
        run: flutter pub get

      - name: Build web app
        env:
          BASE_PATH: ${{ steps.pages.outputs.base_path }}
        run: |
          BASE_HREF="${BASE_PATH%/}/"
          if [ -z "$BASE_HREF" ] || [ "$BASE_HREF" = "/" ]; then
            flutter build web --release
          else
            flutter build web --release --base-href "$BASE_HREF"
          fi

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          name: pr-preview
          path: build/web

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        with:
          artifact_name: pr-preview

  badges:
    name: Publish badges
    needs:
      - tests
      - quality
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download coverage artifact
        uses: actions/download-artifact@v4
        with:
          name: coverage-report
          path: artifacts/coverage

      - name: Generate coverage badge
        uses: cicirello/coverage-badges-action@v3
        with:
          lcov-file: artifacts/coverage/lcov.info
          output: badges
          coverage-badge-filename: coverage.svg

      - name: Generate quality badge
        uses: emibcn/badge-action@v2
        with:
          label: quality
          status: passing
          color: 4CAF50
          path: badges/quality.svg

      - name: Publish badges branch
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: badges
          publish_dir: badges
          keep_files: true
